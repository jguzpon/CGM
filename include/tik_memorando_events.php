<?php

/**
 * 	Dear developer!
 *	Never modify events.php file, it is autogenerated.
 *  Modify PHP/EventTemplates/events.txt instead.
 *
 */

 class eventclass_tik_memorando  extends eventsBase
{
	function __construct()
	{
	// fill list of events
		$this->events["BeforeMoveNextList"]=true;



		$this->events["CopyOnLoad"]=true;

		$this->events["BeforeEdit"]=true;

		$this->events["BeforeDelete"]=true;

		$this->events["BeforeAdd"]=true;


		$this->events["BeforeProcessRowList"]=true;


	}

//	handlers

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: After record processed
function BeforeMoveNextList(&$data, &$row, &$record, $recordId, &$pageObject)
{

		

// Place event code here.
// Use "Add Action" button to add code snippets.
if ( $data["Estado"] != "Pendiente" ) {
	$record["edit_link"] = false;
}
if( $data["Estado"]=="Autorizado" )
	$record["css"]='background:#70F2FF;';
if( $data["Estado"]=="Firmado" )
	$record["css"]='background:#F5EE6C;';
if( strpos("Leido,Impreso",$data["Estado"]) > 0 )
	$record["css"]='background:#AFD562;';

;		
} // function BeforeMoveNextList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
				// Copy page: OnLoad
function CopyOnLoad(&$values, &$where, &$pageObject)
{

		

// Place event code here.
// Use "Add Action" button to add code snippets.
$values["Estado"] = "Pendiente";
;		
} // function CopyOnLoad

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record updated
function BeforeEdit(&$values, $where, &$oldvalues, &$keys, &$message, $inline, &$pageObject)
{

		

// Place event code here.
// Use "Add Action" button to add code snippets.
// Verificar si hay autorizador y no requiere
if( $values["RequiereAutorizacion"] == 0 && !empty($values['Autorizador']) )
	$values['Autorizador'] == "";
// Verificar si requiere Autorizaci贸n
if( $values['RequiereAutorizacion'] && $values['Autorizador'] == '' ) {
	$message = "Debe seleccionar un autorizador o desactivar el requerimiento";
	return false;
}
// Buscar si el memorando es para todos inicializar los otros campos necesarios
if( $values['Todos'] == 1 ) {
	$values['A'] = "";
	$values['ADepartamento'] = "";
}
// Validar si ha introducido direcci贸n
if( $values['Todos'] == 0 && empty($values['ADepartamento']) && empty($values['A']) ) {
	$message = "Debe seleccionar hacia quien dirigir el Memorando, verifique.";
	return false;
}
// Grabar Firma Digital de quien lo envia
$sqla = "select * from tik_firmas where Usuario = '".$values['De']."'";
$rsa = CustomQuery($sqla);
if( $da = db_fetch_array($rsa) ) {
	$values['FirmaDigital'] = $da["FirmaDigital"];
} else {
	$message = "No existe firma digital del emisor";
	return false;
}
// Grabar Firma Digital a quien se envia
if( $values['Todos'] == 0 ) {
	$sqla = "select * from tik_firmas where Usuario = '".$values['A']."'";
	$rsa = CustomQuery($sqla);
	if( $da = db_fetch_array($rsa) ) {
		$values['FirmaDigitalA'] = $da["FirmaDigital"];
	} else {
		$message = "No existe firma digital del receptor";
		return false;
	}
}

return true;
;		
} // function BeforeEdit

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record deleted
function BeforeDelete($where, &$deleted_values, &$message, &$pageObject)
{

		

// Place event code here.
// Use "Add Action" button to add code snippets.
if( $deleted_values['Estado'] != 'Pendiente' ) {
	$message = 'No puede eliminar memorando en proceso o enviado.';
	return flase;
}

return true;
;		
} // function BeforeDelete

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
				// Before record added
function BeforeAdd(&$values, &$message, $inline, &$pageObject)
{

		

// Place event code here.
// Use "Add Action" button to add code snippets.
// Verificar si hay autorizador y no requiere
if( $values["RequiereAutorizacion"] == 0 && !empty($values['Autorizador']) )
	$values['Autorizador'] == "";
// Verificar si requiere Autorizaci贸n
if( $values['RequiereAutorizacion'] && $values['Autorizador'] == '' ) {
	$message = "Debe seleccionar un autorizador o desactivar el requerimiento";
	return false;
}
// Buscar si el memorando es para todos inicializar los otros campos necesarios
if( $values['Todos'] == 1 ) {
	$values['A'] = NULL;
	$values['ADepartamento'] = NULL;
}
// Validar si ha introducido direcci贸n
if( $values['Todos'] == 0 && empty($values['ADepartamento']) && empty($values['A']) ) {
	$message = "Debe seleccionar hacia quien dirigir el Memorando, verifique.";
	return false;
}
// Grabar Firma Digital de quien lo envia
$sqla = "select * from tik_firmas where Usuario = '".$values['De']."'";
$rsa = CustomQuery($sqla);
if( $da = db_fetch_array($rsa) ) {
	$values['FirmaDigital'] = $da["FirmaDigital"];
} else {
	$message = "No existe firma digital del emisor";
	return false;
}
// Grabar Firma Digital a quien se envia
if( $values['Todos'] == 0 && empty($values['ADepartamento']) && !empty($values['A']) ) {
	// Contar la cantidad de usuarios a enviar
	$arru = explode(",",$values['A']);
	$lista = "";
	for( $x=0; $x<count($arru); $x++ ) {
		if( !empty($lista) )
			$lista .= ",";
		$lista .= "'".$arru[$x]."'";
	}
	// Verificar si son igual cantidad
	$listano = "";
	$sqla = "select * from tik_firmas where Usuario in (".$lista.")";
	$rsa = CustomQuery($sqla);
	if( $da = db_fetch_array($rsa) ) {
		$values['FirmaDigitalA'] = $da["FirmaDigital"];
	} else {
		if( !empty($listano) )
			$listano .= ",";
		$listano .= $da["Usuario"];
	}
	if( !empty($listano) ) {
		$message = "Usuario(s) ".$listano.", no cuentan con firma digital";
		return false;
	}
}
// Asignar el numero de documento
$cdepto = DBLookup("select Nomenclatura from zdepartamentos where CodigoDepto = ".$values['CodigoDepto']);
$tmemo = DBLookup("select Siglas from tik_tipomemo where TipoMemorando = ".$values['TipoDocumento']);
$clave = $cdepto.'-'.$tmemo.'-';
$values['Documento'] = DBLookup("select tik_memo_autoinc('".$clave."')");

return true;
;		
} // function BeforeAdd

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
				// List page: Before record processed
function BeforeProcessRowList(&$data, &$pageObject)
{

		

// Place event code here.
// Use "Add Action" button to add code snippets.
if( $data['Categoria'] == 'Privado' && $data['Usuario'] != $_SESSION["UserID"] ) {
	return false;
}

return true;
;		
} // function BeforeProcessRowList

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		



}
?>
